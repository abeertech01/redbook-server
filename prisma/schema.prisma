generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  name           String
  username       String    @unique
  email          String    @unique
  password       String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  posts          Post[]
  comments       Comment[]
  messages       Message[]
  chats          Chat[]
  participantIds Chat[]    @relation("ChatParticipate")
  // upvotedPosts   Post[]    @relation("Upvoting")
  // downvotedPosts Post[]    @relation("Downvoting")

  @@map("users")
}

model Post {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title       String
  content     String
  upvoteIds   String[]
  downvoteIds String[]
  authorId    String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  upvote    Int
  downvote  Int
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  parentId String? // This field references the parent comment
  parent   Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentToComment")

  @@map("comments")
}

model Chat {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  creatorId String
  creator   User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  members   User[]    @relation("ChatParticipate")

  @@map("chats")
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  text      String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}
